{"ast":null,"code":"var _jsxFileName = \"/Users/jungmyungjin/Workspace/GIT_HUB/movie_app/movie_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]); // verson 1 : then 사용\n  //   useEffect(() => {\n  //     fetch(\n  //       `https://yts.mx/api/v2/list_movies.json?minimum_rating=9&sort_by=year`\n  //     )\n  //       .then((response) => response.json())\n  //       .then((json) => setMovies(json));\n  //     setLoading(false);\n  //   }, []);\n  // verson 2 : async 사용\n  // then과 같은 기능을 하지만 then보다 보기 좋다고 한다.\n  //   const getMovies = async () => {\n  //     const response = await fetch(\n  //       `https://yts.mx/api/v2/list_movies.json?minimum_rating=9&sort_by=year`\n  //     );\n  //     const json = await response.json();\n  //     setMovies(json.data.movies);\n  //     setLoading(false);\n  //   };\n  //   useEffect(() => {\n  //     getMovies();\n  //   }, []);\n  // verson 2.1 : async의 간소화\n\n  const getMovies = async () => {\n    const json = await (await fetch(`https://yts.mx/api/v2/list_movies.json?minimum_rating=8&sort_by=year`)).json();\n    setMovies(json.data.movies);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this), movie.summary, \" \"]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1CKmgsbuFjewbGnYkjmhEBs6qQ4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jungmyungjin/Workspace/GIT_HUB/movie_app/movie_app/src/App.js"],"names":["useState","useEffect","App","loading","setLoading","movies","setMovies","getMovies","json","fetch","data","console","log","map","movie","title","summary","id"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC,CAFa,CAIb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,QAAMO,SAAS,GAAG,YAAY;AAC5B,UAAMC,IAAI,GAAG,MAAM,CACjB,MAAMC,KAAK,CACR,sEADQ,CADM,EAIjBD,IAJiB,EAAnB;AAKAF,IAAAA,SAAS,CAACE,IAAI,CAACE,IAAL,CAAUL,MAAX,CAAT;AACAD,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GARD;;AASAH,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIAI,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACA,sBACE;AAAA,cACGF,OAAO,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN;AAAA,gBACGE,MAAM,CAACQ,GAAP,CAAYC,KAAD,iBACV;AAAA,gCACE;AAAA,oBAAKA,KAAK,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGD,KAAK,CAACE,OAFT,EAEkB,GAFlB;AAAA,SAAUF,KAAK,CAACG,EAAhB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA3DQf,G;;KAAAA,G;AA6DT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n\n  // verson 1 : then 사용\n  //   useEffect(() => {\n  //     fetch(\n  //       `https://yts.mx/api/v2/list_movies.json?minimum_rating=9&sort_by=year`\n  //     )\n  //       .then((response) => response.json())\n  //       .then((json) => setMovies(json));\n  //     setLoading(false);\n  //   }, []);\n\n  // verson 2 : async 사용\n  // then과 같은 기능을 하지만 then보다 보기 좋다고 한다.\n  //   const getMovies = async () => {\n  //     const response = await fetch(\n  //       `https://yts.mx/api/v2/list_movies.json?minimum_rating=9&sort_by=year`\n  //     );\n  //     const json = await response.json();\n  //     setMovies(json.data.movies);\n  //     setLoading(false);\n  //   };\n  //   useEffect(() => {\n  //     getMovies();\n  //   }, []);\n\n  // verson 2.1 : async의 간소화\n  const getMovies = async () => {\n    const json = await (\n      await fetch(\n        `https://yts.mx/api/v2/list_movies.json?minimum_rating=8&sort_by=year`\n      )\n    ).json();\n    setMovies(json.data.movies);\n    setLoading(false);\n  };\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  console.log(movies);\n  return (\n    <div>\n      {loading ? (\n        <h1>Loading...</h1>\n      ) : (\n        <div>\n          {movies.map((movie) => (\n            <div key={movie.id}>\n              <h2>{movie.title}</h2>\n              {movie.summary}{\" \"}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}